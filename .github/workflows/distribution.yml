# This is a basic workflow to help you get started with Actions

name: Distribution

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the feature/git-action-distribution-test branch
  push:
    branches:
      - 'feature/git-action-distribution-test'
      - 'test-release/**'
      - 'dev-release/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache Pods
        id: cache-pods
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods
        
      - name: Xcode list
        run: ls -n /Applications/ | grep Xcode*
        
#       - name: Select Xcode
#         run: sudo xcode-select -switch /Applications/Xcode_11.4.1.app
      
      - name: Xcode version
        run: /usr/bin/xcodebuild -version
        
      - name: Keychain
      run: |
        security create-keychain -p "" "$KEYCHAIN"
        security list-keychains -s "$KEYCHAIN"
        security default-keychain -s "$KEYCHAIN"
        security unlock-keychain -p "" "$KEYCHAIN"
        security set-keychain-settings

    - name: Prepare Provision and Code Signing
      run: |
        gpg -d -o ./certs.p12 --pinentry-mode=loopback --passphrase "$DECRYPT_KEY" ./certs.p12.gpg
        gpg -d -o ./provisioning.tar.gz --pinentry-mode=loopback --passphrase "$DECRYPT_KEY" ./provisioning.tar.gz.gpg
        security import ./certs.p12 -k "$KEYCHAIN" -P "$CERT_KEY" -A
        security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
        tar xzvf ./provisioning.tar.gz
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        for PROVISION in `ls ./*.mobileprovision`
        do
          UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
          cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
        done

    - name: Build
      run: |
        pod install
        xcodebuild build -workspace ActionSample.xcworkspace -configuration Automation -scheme ActionSample "OTHER_CODE_SIGN_FLAGS=--keychain '$KEYCHAIN'"
        xcodebuild archive -workspace ActionSample.xcworkspace -scheme ActionSample -archivePath sample.xcarchive
        xcodebuild -exportArchive -archivePath sample.xcarchive -exportPath . -exportOptionsPlist ./ExportOptions.plist

    - name: Check files
      run: ls -R

    - name: Save ipa
      uses: actions/upload-artifact@v2
      with:
        name: ios-artifact
        path: ActionSample.ipa

  upload:
    runs-on: ubuntu-latest
    needs: build
    env:
      APPCENTER_TOKEN: ${{ secrets.APPCENTER_TOKEN }}
    steps:

    - name: Get ipa
      uses: actions/download-artifact@v2
      with:
        name: ios-artifact

    - name: Check files
      run: ls -R

    - name: Upload ipa to App Center
      uses: wzieba/AppCenter-Github-Action@v1.3.1
      with:
        appName: luisrjaeger/Action-Sample
        token: ${{ secrets.APPCENTER_TOKEN }}
        group: testers
        file: ActionSample.ipa
       
      - name: Upload ipa to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
           appId: ${{secrets.FIREBASE_APP_ID}}
           token: ${{secrets.FIREBASE_TOKEN}}
           file: ~/result/RibsTest.ipa
           
